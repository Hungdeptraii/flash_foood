const admin = require('firebase-admin');
const serviceAccount = require('../firebase-service-account.json');

// Kh·ªüi t·∫°o Firebase Admin SDK n·∫øu ch∆∞a c√≥
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
}

const db = admin.firestore();

class NotificationService {
  // L∆∞u th√¥ng b√°o v√†o Firebase Database
  static async saveNotification({
    title,
    body,
    userId,
    type,
    orderId,
    status,
    reason = null
  }) {
    try {
      const notificationData = {
        title: title,
        body: body,
        userId: userId,
        type: type,
        orderId: orderId,
        status: status,
        read: false,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        ...(reason && { reason: reason })
      };

      const docRef = await db.collection('notifications').add(notificationData);
      console.log('Notification saved to Firebase Database with ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('Error saving notification to Firebase Database:', error);
      throw error;
    }
  }

  // T·∫°o th√¥ng b√°o ƒë·∫∑t h√†ng th√†nh c√¥ng
  static async createOrderSuccessNotification({
    userId,
    orderId,
    orderTotal,
    orderItems = []
  }) {
    try {
      const title = 'ƒê·∫∑t h√†ng th√†nh c√¥ng! üéâ';
      const body = `ƒê∆°n h√†ng #${orderId} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng v·ªõi t·ªïng ti·ªÅn ${orderTotal} VND. Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω ƒë∆°n h√†ng c·ªßa b·∫°n s·ªõm nh·∫•t!`;
      
      const notificationData = {
        title: title,
        body: body,
        userId: userId,
        type: 'order_success',
        orderId: orderId,
        status: 'pending',
        orderTotal: orderTotal,
        orderItems: orderItems,
        read: false,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
      };

      const docRef = await db.collection('notifications').add(notificationData);
      console.log('Order success notification saved with ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('Error creating order success notification:', error);
      throw error;
    }
  }

  // T·∫°o th√¥ng b√°o tr·∫°ng th√°i ƒë∆°n h√†ng
  static async createOrderStatusNotification({
    userId,
    orderId,
    status,
    message
  }) {
    try {
      let title = '';
      let body = '';
      
      switch (status) {
        case 'confirmed':
          title = 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n! ‚úÖ';
          body = `ƒê∆°n h√†ng #${orderId} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã.`;
          break;
        case 'preparing':
          title = 'ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã! üë®‚Äçüç≥';
          body = `ƒê∆°n h√†ng #${orderId} ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã. S·∫Ω s·∫µn s√†ng s·ªõm!`;
          break;
        case 'ready':
          title = 'ƒê∆°n h√†ng ƒë√£ s·∫µn s√†ng! üöö';
          body = `ƒê∆°n h√†ng #${orderId} ƒë√£ s·∫µn s√†ng v√† ƒëang ƒë∆∞·ª£c giao ƒë·∫øn b·∫°n.`;
          break;
        case 'delivered':
          title = 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao! üéâ';
          body = `ƒê∆°n h√†ng #${orderId} ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!`;
          break;
        case 'cancelled':
          title = 'ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy! ‚ùå';
          body = `ƒê∆°n h√†ng #${orderId} ƒë√£ b·ªã h·ªßy. ${message || 'Vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu c√≥ th·∫Øc m·∫Øc.'}`;
          break;
        default:
          title = 'C·∫≠p nh·∫≠t ƒë∆°n h√†ng';
          body = message || `ƒê∆°n h√†ng #${orderId} c√≥ c·∫≠p nh·∫≠t m·ªõi.`;
      }

      const notificationData = {
        title: title,
        body: body,
        userId: userId,
        type: 'order_status',
        orderId: orderId,
        status: status,
        message: message,
        read: false,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
      };

      const docRef = await db.collection('notifications').add(notificationData);
      console.log('Order status notification saved with ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('Error creating order status notification:', error);
      throw error;
    }
  }

  // L·∫•y danh s√°ch th√¥ng b√°o c·ªßa user
  static async getUserNotifications(userId) {
    try {
      // Ch·ªâ filter theo userId, kh√¥ng orderBy ƒë·ªÉ tr√°nh c·∫ßn index ph·ª©c t·∫°p
      const snapshot = await db.collection('notifications')
        .where('userId', '==', userId)
        .get();

      const notifications = [];
      snapshot.forEach((doc) => {
        notifications.push({
          id: doc.id,
          ...doc.data()
        });
      });

      // Sort trong JavaScript thay v√¨ trong query
      notifications.sort((a, b) => {
        const dateA = a.createdAt ? new Date(a.createdAt.toDate()) : new Date(0);
        const dateB = b.createdAt ? new Date(b.createdAt.toDate()) : new Date(0);
        return dateB - dateA; // Descending order
      });

      return notifications;
    } catch (error) {
      console.error('Error getting user notifications:', error);
      return [];
    }
  }

  // ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
  static async markNotificationAsRead(notificationId) {
    try {
      await db.collection('notifications').doc(notificationId).update({
        read: true
      });
      console.log('Notification marked as read:', notificationId);
    } catch (error) {
      console.error('Error marking notification as read:', error);
      throw error;
    }
  }

  // X√≥a th√¥ng b√°o
  static async deleteNotification(notificationId) {
    try {
      await db.collection('notifications').doc(notificationId).delete();
      console.log('Notification deleted:', notificationId);
    } catch (error) {
      console.error('Error deleting notification:', error);
      throw error;
    }
  }

  // L·∫•y s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
  static async getUnreadNotificationCount(userId) {
    try {
      const snapshot = await db.collection('notifications')
        .where('userId', '==', userId)
        .where('read', '==', false)
        .get();

      return snapshot.size;
    } catch (error) {
      console.error('Error getting unread notification count:', error);
      return 0;
    }
  }
}

module.exports = NotificationService; 